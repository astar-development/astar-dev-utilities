<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AStar.Dev.Utilities</name>
    </assembly>
    <members>
        <member name="T:AStar.Dev.Utilities.Constants">
            <summary>
                The <see href="Constants"></see>see> class contains static / constant properties to simplify and centralise various
                settings
            </summary>
        </member>
        <member name="P:AStar.Dev.Utilities.Constants.WebDeserialisationSettings">
            <summary>
                Returns an instance of <see href="JsonSerializerOptions"></see> configured with the Web defaults
            </summary>
        </member>
        <member name="T:AStar.Dev.Utilities.EncryptionExtensions">
            <summary>
                The <see cref="T:AStar.Dev.Utilities.EncryptionExtensions" /> class contains extension methods to encrypt / decrypt the specified string
            </summary>
        </member>
        <member name="M:AStar.Dev.Utilities.EncryptionExtensions.Encrypt(System.String,System.String,System.String)">
            <summary>
                The Encrypt extension method will encrypt the specified string (using AES encryption)
            </summary>
            <param name="plainText">The string to encrypt</param>
            <param name="key">
                The optional key to use for the encryption. If supplied, it must be 16, 24, or 32 bytes long. If not
                specified, an internal default (32 bytes) will be used
            </param>
            <param name="iv">
                The optional iv (initialisation vector) to use for the decryption. If supplied, it must be 16 bytes
                long. If not specified, an internal default will be used
            </param>
            <returns>The original string encrypted appropriately</returns>
        </member>
        <member name="M:AStar.Dev.Utilities.EncryptionExtensions.Decrypt(System.String,System.String,System.String)">
            <summary>
                The Decrypt extension method will encrypt the specified string (using AES encryption)
            </summary>
            <param name="encryptedText">The string to decrypt</param>
            <param name="key">
                The optional key to use for the encryption. If supplied, it must be 16, 24, or 32 bytes long. If not
                specified, an internal default (32 bytes) will be used
            </param>
            <param name="iv">
                The optional iv (initialisation vector) to use for the decryption. If supplied, it must be 16 bytes
                long. If not specified, an internal default will be used
            </param>
            <returns>The decrypted string</returns>
        </member>
        <member name="T:AStar.Dev.Utilities.EnumExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Utilities.EnumExtensions.ParseEnum``1(System.String)">
            <summary>
                The ParseEnum method will parse the supplied string and return the matching enum value
            </summary>
            <typeparam name="T">The typeof of the expected enum</typeparam>
            <param name="value">The value to parse to the enum</param>
            <returns>The parsed value as the matching enum value</returns>
            <exception cref="T:System.ArgumentException">Thrown when the string is not a valid enum value</exception>
        </member>
        <member name="T:AStar.Dev.Utilities.LinqExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Utilities.LinqExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            </summary>
            <param name="enumerable"></param>
            <param name="action"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:AStar.Dev.Utilities.ObjectExtensions">
            <summary>
                The <see cref="T:AStar.Dev.Utilities.ObjectExtensions" /> class contains some useful methods to enable various tasks
                to be performed in a more fluid, English sentence, style
            </summary>
        </member>
        <member name="M:AStar.Dev.Utilities.ObjectExtensions.ToJson``1(``0)">
            <summary>
                The ToJson method, as you might expect, converts the supplied object to its JSON equivalent (using the
                JsonSerializerDefaults.Web defaults with WriteIndented set to true)
            </summary>
            <param name="object">The object to convert to JSON</param>
            <returns>The JSON string of the object supplied</returns>
        </member>
        <member name="T:AStar.Dev.Utilities.RegexExtensions">
            <summary>
            </summary>
        </member>
        <member name="M:AStar.Dev.Utilities.RegexExtensions.ContainsAtLeastOneLowercaseLetter(System.String)">
            <summary>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Utilities.RegexExtensions.ContainsAtLeastOneUppercaseLetter(System.String)">
            <summary>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Utilities.RegexExtensions.ContainsAtLeastOneDigit(System.String)">
            <summary>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Utilities.RegexExtensions.ContainsAtLeastOneSpecialCharacter(System.String)">
            <summary>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Utilities.RegexExtensions.LowercaseLettersRegex">
            <remarks>
            Pattern:<br/>
            <code>[a-z]</code><br/>
            Options:<br/>
            <code>RegexOptions.CultureInvariant</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [a-z].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:AStar.Dev.Utilities.RegexExtensions.UppercaseLettersRegex">
            <remarks>
            Pattern:<br/>
            <code>[A-Z]</code><br/>
            Options:<br/>
            <code>RegexOptions.CultureInvariant</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [A-Z].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:AStar.Dev.Utilities.RegexExtensions.DigitRegex">
            <remarks>
            Pattern:<br/>
            <code>[0-9]</code><br/>
            Options:<br/>
            <code>RegexOptions.CultureInvariant</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [0-9].<br/>
            </code>
            </remarks>
        </member>
        <member name="M:AStar.Dev.Utilities.RegexExtensions.SpecialCharacterRegex">
            <remarks>
            Pattern:<br/>
            <code>[!-\\/:-@[-`¬{-~]</code><br/>
            Options:<br/>
            <code>RegexOptions.CultureInvariant</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [!-/:-@[-`{-~\u00AC].<br/>
            </code>
            </remarks>
        </member>
        <member name="T:AStar.Dev.Utilities.StringExtensions">
            <summary>
                The <see cref="T:AStar.Dev.Utilities.StringExtensions" /> class contains some useful methods to enable checks to be
                performed in a more fluid, English sentence, style
            </summary>
        </member>
        <member name="M:AStar.Dev.Utilities.StringExtensions.IsNull(System.String)">
            <summary>
                The IsNull method, as you might expect, checks whether the string is, in fact, null
            </summary>
            <param name="value">The string to check for being null</param>
            <returns>True if the string is null, False otherwise</returns>
        </member>
        <member name="M:AStar.Dev.Utilities.StringExtensions.IsNotNull(System.String)">
            <summary>
                The IsNotNull method, as you might expect, checks whether the string is not null
            </summary>
            <param name="value">The string to check for being not null</param>
            <returns>True if the string is not null, False otherwise</returns>
        </member>
        <member name="M:AStar.Dev.Utilities.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
                The IsNullOrWhiteSpace method, as you might expect, checks whether the string is, in fact, null, empty or
                whitespace
            </summary>
            <param name="value">The string to check for being null, empty or whitespace</param>
            <returns>True if the string is null, empty or whitespace, False otherwise</returns>
        </member>
        <member name="M:AStar.Dev.Utilities.StringExtensions.IsNotNullOrWhiteSpace(System.String)">
            <summary>
                The IsNotNullOrWhiteSpace method, as you might expect, checks whether the string is not null, empty or whitespace
            </summary>
            <param name="value">The string to check for being not null, empty or whitespace</param>
            <returns>True if the string is not null, empty or whitespace, False otherwise</returns>
        </member>
        <member name="M:AStar.Dev.Utilities.StringExtensions.FromJson``1(System.String)">
            <summary>
                The FromJson method, as you might expect, converts the supplied JSON to the specified object
            </summary>
            <typeparam name="T">The required type of the object to deserialise to</typeparam>
            <param name="json">The JSON representation of the object</param>
            <returns>A deserialised object based on the original JSON</returns>
        </member>
        <member name="M:AStar.Dev.Utilities.StringExtensions.FromJson``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
                The FromJson method, as you might expect, converts the supplied JSON to the specified object
            </summary>
            <typeparam name="T">The required type of the object to deserialise to</typeparam>
            <param name="json">The JSON representation of the object</param>
            <param name="options">
                Allows the specific <see href="JsonSerializerOptions">options</see> to be set to control
                deserialisation
            </param>
            <returns>A deserialised object based on the original JSON</returns>
        </member>
        <member name="M:AStar.Dev.Utilities.StringExtensions.IsImage(System.String)">
            <summary>
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Utilities.StringExtensions.IsNumberOnly(System.String)">
            <summary>
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:AStar.Dev.Utilities.StringExtensions.TruncateIfRequired(System.String,System.Int32)">
            <summary>
                The TruncateIfRequired method will, as the name suggests, truncate the string if the length exceeds the specified length
            </summary>
            <param name="value">The raw string to potentially truncate</param>
            <param name="truncateLength">The maximum length the string should be truncated to if required</param>
            <returns>The specified string or the truncated version</returns>
        </member>
        <member name="M:AStar.Dev.Utilities.StringExtensions.RemoveTrailing(System.String,System.String)">
            <summary>
                The RemoveTrailing method will, as the name suggests, remove the specified character from the end if it exists
            </summary>
            <param name="value">The raw string to potentially remove the trailing character from</param>
            <param name="removeTrailing">The character to remove from the end if it exists</param>
            <returns>The original or updated string</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LowercaseLettersRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the LowercaseLettersRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.LowercaseLettersRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LowercaseLettersRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LowercaseLettersRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LowercaseLettersRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LowercaseLettersRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LowercaseLettersRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LowercaseLettersRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UppercaseLettersRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the UppercaseLettersRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.UppercaseLettersRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UppercaseLettersRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UppercaseLettersRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UppercaseLettersRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UppercaseLettersRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UppercaseLettersRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UppercaseLettersRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DigitRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DigitRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DigitRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DigitRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DigitRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DigitRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DigitRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DigitRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DigitRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SpecialCharacterRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the SpecialCharacterRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.SpecialCharacterRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SpecialCharacterRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SpecialCharacterRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SpecialCharacterRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SpecialCharacterRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SpecialCharacterRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SpecialCharacterRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_nonAscii_8CD7FC6D8414F97879531EB4BA8F837AAE4E0F47B7968451545B13CB721CD784">
            <summary>Supports searching for characters in or not in "!\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~¬".</summary>
        </member>
    </members>
</doc>
